<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cuestionario</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="style.css" rel="stylesheet" type="text/css" />
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>

    <div class="container my-5">
        <h2 class="text-center" id="questionTitle">Pregunta</h2>
        <form id="quizForm">
            <div id="answers" class="mt-4">
                <div class="form-check">
                    <input type="radio" class="form-check-input" name="answer" id="answer1" value="1">
                    <label class="form-check-label" for="answer1">Respuesta 1</label>
                </div>
            </div>
            <button type="submit" class="btn btn-primary mt-3">Enviar</button>
        </form>
        <button id="hintButton" class="btn btn-info mt-3">Obtener una pista</button>
        <div id="hint" class="mt-3 text-center text-success"></div>
        <div id="questionIndex" class="mt-3 text-center"></div>
    </div>

    <!-- Incluir Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Obtener la categoría seleccionada desde localStorage
        const categoria = localStorage.getItem('selectedCategory');

        if (!categoria) {
            alert('No has seleccionado una categoría.');
            window.location.href = 'index.html'; // Redirigir al inicio si no hay categoría seleccionada
        }

        // Banco de preguntas
        const preguntas = {
            "Cálculo Avanzado": [
                { 
                    "pregunta": "¿Cuál es el dominio de la inecuación \\( \\frac{1}{x - 2} > 0 \\)?", 
                    "correcta": "x > 2", 
                    "incorrectas": ["x < 2", "x \\geq 2", "x = 2"] 
                },
                { 
                    "pregunta": "¿Qué condición debe cumplirse para que \\( \\sqrt{2x - 5} \\geq 0 \\)?", 
                    "correcta": "x \\geq 5/2", 
                    "incorrectas": ["x > 5/2", "x \\geq 0", "x \\leq 5/2"] 
                },
                { 
                    "pregunta": "¿Cuál es el dominio de la inecuación \\( \\frac{x + 3}{x^2 - 9} \\leq 0 \\)?", 
                    "correcta": "x < -3 o 0 \\leq x < 3", 
                    "incorrectas": ["x > 3", "x \\neq \\pm 3", "x > 0 y x \\neq 3"] 
                },
                { 
                    "pregunta": "¿Cuál es el dominio de la inecuación \\( \\frac{x^2 - 1}{x - 2} > 0 \\)?", 
                    "correcta": "x \\in (-\\infty, -1) \\cup (1, 2) \\cup (2, \\infty)", 
                    "incorrectas": ["x \\neq 2", "x > 2", "x \\leq 1"] 
                }
            ]
            "Logica": [
                { 
                    "pregunta": "Si \\( p: \\) 'Está lloviendo' y \\( q: \\) 'Llevo paraguas', ¿cuál es la forma lógica de la proposición 'Si está lloviendo, entonces llevo paraguas'? ", 
                    "correcta": "p \\rightarrow q", 
                    "incorrectas": ["p \\land q", "p \\lor q", "q \\rightarrow p"] 
                },
                { 
                    "pregunta": "¿Cuál es la forma lógica de la proposición 'No está lloviendo y no llevo paraguas'? ", 
                    "correcta": "\\( \\neg p \\land \\neg q \\)", 
                    "incorrectas": ["p \\lor q", "\\neg (p \\land q)", "\\neg (p \\lor q)"] 
                },
                { 
                    "pregunta": "Si \\( p: \\) 'El examen es fácil' y \\( q: \\) 'Apruebo el curso', ¿cuál es la forma lógica de 'Apruebo el curso si el examen es fácil'? ", 
                    "correcta": "q \\rightarrow p", 
                    "incorrectas": ["p \\rightarrow q", "p \\land q", "q \\land p"] 
                },
                { 
                    "pregunta": "¿Cuál es la forma lógica de la proposición 'Si no estudio, entonces no apruebo'? ", 
                    "correcta": "\\( \\neg r \\rightarrow \\neg s \\)", 
                    "incorrectas": ["r \\rightarrow s", "\\neg (r \\lor s)", "r \\land \\neg s"] 
                },
                { 
                    "pregunta": "¿Cuál es la forma lógica de la proposición 'Está lloviendo o no llevo paraguas'? ", 
                    "correcta": "p \\lor \\neg q", 
                    "incorrectas": ["p \\land q", "p \\rightarrow \\neg q", "\\neg p \\lor q"] 
                }
            ]

        };

        // Seleccionar 5 preguntas aleatorias de la categoría
        const preguntasCategoria = preguntas[categoria];
        let preguntasSeleccionadas = [];

        while (preguntasSeleccionadas.length < 5 && preguntasCategoria.length > 0) {
            const preguntaAleatoria = preguntasCategoria.splice(Math.floor(Math.random() * preguntasCategoria.length), 1)[0];
            preguntasSeleccionadas.push(preguntaAleatoria);
        }

        let currentQuestionIndex = 0;
        let userAnswers = [];

        function mostrarPregunta() {
            const preguntaSeleccionada = preguntasSeleccionadas[currentQuestionIndex];
            document.getElementById('questionTitle').textContent = preguntaSeleccionada.pregunta;

            // Crear respuestas aleatorias
            const respuestas = [preguntaSeleccionada.correcta, ...preguntaSeleccionada.incorrectas];
            respuestas.sort(() => Math.random() - 0.5); // Mezclar respuestas

            const answersDiv = document.getElementById('answers');
            answersDiv.innerHTML = ''; // Limpiar respuestas anteriores
            respuestas.forEach(respuesta => {
                const label = document.createElement('label');
                label.className = "form-check-label";
                // Usar etiquetas TeX para las respuestas
                label.innerHTML = `<input type="radio" name="answer" value="${respuesta}" class="form-check-input"> \\(${respuesta}\\)`;
                answersDiv.appendChild(label);
                answersDiv.appendChild(document.createElement('br'));
            });

            document.getElementById('questionIndex').textContent = `Pregunta ${currentQuestionIndex + 1} de ${preguntasSeleccionadas.length}`;

            // Forzar el renderizado de MathJax para las nuevas alternativas
            MathJax.typesetPromise().then(() => {
                console.log("MathJax ha renderizado las ecuaciones.");
            }).catch((err) => console.log("Error al renderizar MathJax: ", err));
        }

        // Manejar el envío del formulario
        document.getElementById('quizForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const selectedAnswer = document.querySelector('input[name="answer"]:checked');
            if (!selectedAnswer) {
                alert('Por favor, selecciona una respuesta.');
                return;
            }
            const isCorrect = selectedAnswer.value === preguntasSeleccionadas[currentQuestionIndex].correcta;
            userAnswers.push({
                pregunta: preguntasSeleccionadas[currentQuestionIndex].pregunta,
                respuestaSeleccionada: selectedAnswer.value,
                esCorrecto: isCorrect
            });

            // Ir a la siguiente pregunta o mostrar resultados
            currentQuestionIndex++;
            if (currentQuestionIndex < preguntasSeleccionadas.length) {
                mostrarPregunta();
            } else {
                // Redirigir a la página de resultados
                localStorage.setItem('userAnswers', JSON.stringify(userAnswers));
                window.location.href = "/result";
            }
        });

        // Obtener pista desde el backend usando ChatGPT
        document.getElementById('hintButton').addEventListener('click', function() {
            const preguntaSeleccionada = preguntasSeleccionadas[currentQuestionIndex].pregunta;

            fetch('http://quiz/pista', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ pregunta: preguntaSeleccionada }),
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('hint').textContent = `Pista: ${data.pista}`;
            })
            .catch(error => {
                console.error('Error al obtener la pista:', error);
                alert('Hubo un error al obtener la pista.');
            });
        });

        // Mostrar la primera pregunta al cargar
        mostrarPregunta();
    </script>
</body>
</html>
